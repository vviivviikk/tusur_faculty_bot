import os
import sys
import requests
from datetime import datetime

print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò TELEGRAM-–ë–û–¢–ê")
print("=" * 50)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
env_path = '.env'

if not os.path.exists(env_path):
    print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞!")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
    print("DEBUG=True")
else:
    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    try:
        with open(env_path, 'r', encoding='utf-8') as f:
            env_content = f.read()

        if 'BOT_TOKEN=' in env_content:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
            for line in env_content.splitlines():
                if line.startswith('BOT_TOKEN='):
                    token = line[10:].strip()
                    if token and token != 'your_bot_token_here' and len(token) > 20:
                        print(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        print(f"–ù–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞: {token[:10]}...")

                        if ':' in token:
                            print("‚úÖ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            print("‚ùå –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':'!")
                    else:
                        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É")
                    break
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º python-dotenv
try:
    from dotenv import load_dotenv

    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å dotenv
    load_dotenv()
    token_from_env = os.getenv('BOT_TOKEN')
    if token_from_env:
        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ os.getenv()")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ os.getenv()")

except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install python-dotenv")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
required_files = [
    'main.py',
    'requirements.txt',
    'bot/config.py',
    'bot/handlers/start.py',
    'bot/__init__.py',
    'bot/handlers/__init__.py',
]

print("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
for file in required_files:
    if os.path.exists(file):
        print(f"‚úÖ {file}")
    else:
        print(f"‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
required_modules = ['aiogram', 'dotenv', 'asyncio', 'requests']
for module in required_modules:
    try:
        if module == 'dotenv':
            import dotenv
        elif module == 'requests':
            import requests
        elif module == 'asyncio':
            import asyncio
        elif module == 'aiogram':
            import aiogram
        print(f"‚úÖ {module} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError as e:
        print(f"‚ùå {module} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù: {e}")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
try:
    from bot.config import Config

    print("‚úÖ –ú–æ–¥—É–ª—å Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    if hasattr(Config, 'BOT_TOKEN'):
        if Config.BOT_TOKEN:
            print(f"‚úÖ Config.BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(Config.BOT_TOKEN)})")
        else:
            print("‚ùå Config.BOT_TOKEN —Ä–∞–≤–µ–Ω None")
    else:
        print("‚ùå –í –∫–ª–∞—Å—Å–µ Config –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ BOT_TOKEN")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Config: {e}")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API...")
# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
token_to_check = None

try:
    token_to_check = os.getenv('BOT_TOKEN')
    if not token_to_check:
        from bot.config import Config

        token_to_check = Config.BOT_TOKEN
except:
    pass

if not token_to_check:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏ –∏–∑ Config")
else:
    try:
        url = f"https://api.telegram.org/bot{token_to_check}/getMe"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200 and data.get('ok'):
            print("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Telegram API")
            bot_info = data['result']
            print(f"–ò–º—è –±–æ—Ç–∞: {bot_info.get('first_name')}")
            print(f"Username: @{bot_info.get('username')}")
            print(f"ID –±–æ—Ç–∞: {bot_info.get('id')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ({response.status_code})")
            print(f"–û—Ç–≤–µ—Ç API: {data.get('description', 'Unknown error')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API: {e}")

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
print(f"–§–∞–π–ª .env: {'‚úÖ' if os.path.exists('.env') else '‚ùå'}")

dotenv_available = False
try:
    import dotenv

    dotenv_available = True
except ImportError:
    pass
print(f"–ó–∞–≥—Ä—É–∑–∫–∞ dotenv: {'‚úÖ' if dotenv_available else '‚ùå'}")

structure_ok = all(os.path.exists(f) for f in required_files)
print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {'‚úÖ' if structure_ok else '‚ùå'}")

modules_ok = True
for module in required_modules:
    try:
        if module == 'dotenv':
            import dotenv
        elif module == 'requests':
            import requests
        elif module == 'asyncio':
            import asyncio
        elif module == 'aiogram':
            import aiogram
    except ImportError:
        modules_ok = False
        break
print(f"–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π: {'‚úÖ' if modules_ok else '‚ùå'}")

config_ok = False
try:
    from bot.config import Config

    if Config.BOT_TOKEN:
        config_ok = True
except:
    pass
print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: {'‚úÖ' if config_ok else '‚ùå'}")

has_valid_token = False
if token_to_check:
    try:
        url = f"https://api.telegram.org/bot{token_to_check}/getMe"
        response = requests.get(url)
        if response.status_code == 200 and response.json().get('ok'):
            has_valid_token = True
    except:
        pass
print(f"Telegram API: {'‚úÖ' if has_valid_token else '‚ùå'}")

# –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
if all([
    os.path.exists('.env'),
    dotenv_available,
    structure_ok,
    modules_ok,
    config_ok,
    has_valid_token
]):
    print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.")
else:
    print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")

print("\n" + "=" * 50)
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")