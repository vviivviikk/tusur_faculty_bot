from bot.ml.tusur_model import faculty_predictor
from bot.data.subjects import SCHOOL_SUBJECTS, EXAM_SUBJECTS

async def get_faculty_recommendation(user_data):

    favorite_subjects_codes = user_data.get('selected_favorite_subjects', [])
    disliked_subjects_codes = user_data.get('selected_disliked_subjects', [])
    exam_codes = user_data.get('selected_exams', [])

    favorite_subjects = []
    for code in favorite_subjects_codes:
        if code in SCHOOL_SUBJECTS:
            favorite_subjects.append(code)
    
    disliked_subjects = []
    for code in disliked_subjects_codes:
        if code in SCHOOL_SUBJECTS:
            disliked_subjects.append(code)

    exams = []
    for code in exam_codes:
        if code in EXAM_SUBJECTS:
            clean_code = code.replace('_ege', '').replace('_oge', '')
            exams.append(clean_code)

    ml_input = {
        'liked_subjects': favorite_subjects,
        'disliked_subjects': disliked_subjects,
        'exams': exams,
        'interests': user_data.get('interests', ''),
        'not_interests': user_data.get('dislikes', '')
    }
    
    try:
        prediction = faculty_predictor.predict_faculty(ml_input)

        return {
            'code': prediction['code'],
            'name': prediction['name'],
            'reason': prediction['reason'],
            'directions': prediction['directions']
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ ML –º–æ–¥–µ–ª–∏: {e}")
        return await simple_faculty_recommendation(user_data)

async def simple_faculty_recommendation(user_data):

    from bot.config import Config
    
    favorite_subjects_codes = user_data.get('selected_favorite_subjects', [])
    interests = user_data.get('interests', '').lower()

    if '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞' in favorite_subjects_codes or any(word in interests for word in ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥–∏–Ω–≥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã']):
        return {
            'code': '–§–ò–¢',
            'name': Config.FACULTIES['–§–ò–¢'],
            'reason': '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ',
            'directions': '‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è\n‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        }
    elif '—Ñ–∏–∑–∏–∫–∞' in favorite_subjects_codes or any(word in interests for word in ['—Ä–∞–¥–∏–æ', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—Å–∏–≥–Ω–∞–ª—ã', '—Å–≤—è–∑—å']):
        return {
            'code': '–†–¢–§', 
            'name': Config.FACULTIES['–†–¢–§'],
            'reason': '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è —Ñ–∏–∑–∏–∫–æ–π –∏ —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–æ–π',
            'directions': '‚Ä¢ –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\n‚Ä¢ –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏\n‚Ä¢ –†–∞–¥–∏–æ—Å–≤—è–∑—å'
        }
    elif any(word in interests for word in ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–±–∏–∑–Ω–µ—Å', '—ç–∫–æ–Ω–æ–º–∏–∫–∞']):
        return {
            'code': '–§–°–£',
            'name': Config.FACULTIES['–§–°–£'],
            'reason': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –±–∏–∑–Ω–µ—Å–∞',
            'directions': '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö\n‚Ä¢ –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n‚Ä¢ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
        }
    elif any(word in interests for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–æ–±—â–µ–Ω–∏–µ', '—è–∑—ã–∫–∏', '–∫—É–ª—å—Ç—É—Ä–∞']):
        return {
            'code': '–ì–§',
            'name': Config.FACULTIES['–ì–§'],
            'reason': '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤',
            'directions': '‚Ä¢ –õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞\n‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è\n‚Ä¢ –°–æ—Ü–∏–æ–ª–æ–≥–∏—è\n‚Ä¢ –ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è'
        }
    elif any(subject in favorite_subjects_codes for subject in ['—Ñ–∏–∑–∏–∫–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è']) or any(word in interests for word in ['–∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞', '—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']):
        return {
            'code': '–§–≠–¢',
            'name': Config.FACULTIES['–§–≠–¢'],
            'reason': '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π',
            'directions': '‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n‚Ä¢ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞\n‚Ä¢ –ú–∏–∫—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
        }
    else:
        return {
            'code': '–§–ò–¢',
            'name': Config.FACULTIES['–§–ò–¢'], 
            'reason': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π',
            'directions': '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞\n‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        }

async def initialize_ml_model():
    try:
        if not faculty_predictor.load_model():
            print("ü§ñ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ML –º–æ–¥–µ–ª–∏ - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
            faculty_predictor.train_model(num_samples=1500)
            faculty_predictor.save_model()
        print("‚úÖ ML –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–∏: {e}")
        print("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ fallback")
