from bot.ml.tusur_model import faculty_predictor, initialize_model
from bot.config import Config
import logging
import asyncio

# –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
_model_initialized = False

async def ensure_model_initialized():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"""
    global _model_initialized
    if not _model_initialized:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, initialize_model)
            _model_initialized = True
            logging.info("‚úÖ ML-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML-–º–æ–¥–µ–ª–∏: {e}")

async def get_faculty_recommendation(user_data: dict) -> dict:
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ handlers
    """
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        await ensure_model_initialized()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        processed_data = _prepare_user_data(user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, faculty_predictor.predict_faculty, processed_data)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        return _format_recommendation(result)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ ML-–º–æ–¥–µ–ª–∏: {e}")
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return _fallback_recommendation(user_data)

def _prepare_user_data(user_data: dict) -> dict:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    favorite_subjects = user_data.get('favorite_subjects', '')
    if isinstance(favorite_subjects, str):
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
        favorite_subjects = [s.strip() for s in favorite_subjects.split(',') if s.strip()]
    
    disliked_subjects = user_data.get('disliked_subjects', '')  
    if isinstance(disliked_subjects, str):
        disliked_subjects = [s.strip() for s in disliked_subjects.split(',') if s.strip()]
        
    exams = user_data.get('exams', '')
    if isinstance(exams, str):
        exams = [s.strip() for s in exams.split(',') if s.strip()]
    
    return {
        'liked_subjects': favorite_subjects,
        'disliked_subjects': disliked_subjects, 
        'exams': exams,
        'interests': user_data.get('interests', ''),
        'not_interests': user_data.get('dislikes', '')  # –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á
    }

def _format_recommendation(ml_result: dict) -> dict:
    """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ML-–º–æ–¥–µ–ª–∏ –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    
    faculty_code = ml_result.get('code', '–§–ò–¢')
    confidence = ml_result.get('confidence', 0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ confidence –≤ reason
    reason = ml_result.get('reason', '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')
    if confidence > 0.8:
        reason += f" üéØ (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})"
    elif confidence > 0.6:
        reason += f" ‚úÖ (—Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {confidence:.0%})"
    else:
        reason += f" ü§î (–≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {confidence:.0%})"
    
    return {
        'name': Config.FACULTIES.get(faculty_code, ml_result.get('name')),
        'reason': reason,
        'directions': ml_result.get('directions', '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
        'confidence': confidence
    }

def _fallback_recommendation(user_data: dict) -> dict:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ML-–º–æ–¥–µ–ª–∏"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∫ fallback
    favorite_subjects = user_data.get('favorite_subjects', '').lower()
    interests = user_data.get('interests', '').lower()
    all_text = f"{favorite_subjects} {interests}"
    
    if any(word in all_text for word in ['–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'it', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
        faculty = '–§–ò–¢'
    elif any(word in all_text for word in ['—Ñ–∏–∑–∏–∫–∞', '—Ä–∞–¥–∏–æ', '—Å–≤—è–∑—å', '—Å–∏–≥–Ω–∞–ª']):
        faculty = '–†–¢–§'
    elif any(word in all_text for word in ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–±–∏–∑–Ω–µ—Å', '—Å–∏—Å—Ç–µ–º–∞']):
        faculty = '–§–°–£'
    elif any(word in all_text for word in ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞', '—Ä–æ–±–æ—Ç', '—Ç–µ—Ö–Ω–∏–∫–∞']):
        faculty = '–§–≠–¢'
    elif any(word in all_text for word in ['–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—è–∑—ã–∫']):
        faculty = '–ì–§'
    else:
        faculty = '–§–ò–¢'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    return {
        'name': Config.FACULTIES[faculty],
        'reason': '–ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)',
        'directions': '‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n‚Ä¢ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        'confidence': 0.5
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML-–º–æ–¥–µ–ª–∏
async def test_ml_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML-–º–æ–¥–µ–ª–∏"""
    test_data = {
        'favorite_subjects': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞',
        'disliked_subjects': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –∏—Å—Ç–æ—Ä–∏—è',
        'exams': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        'interests': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, –∞–ª–≥–æ—Ä–∏—Ç–º—ã',
        'dislikes': '–ø–æ—ç–∑–∏—è, –∏—Å–∫—É—Å—Å—Ç–≤–æ'
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏...")
    result = await get_faculty_recommendation(test_data)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result
