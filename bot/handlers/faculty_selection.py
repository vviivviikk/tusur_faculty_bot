from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.config import Config
from bot.keyboards.main_menu import get_faculty_inline_keyboard, get_main_menu
from bot.keyboards.subjects import get_subjects_keyboard, get_confirm_subjects_keyboard
from bot.data.subjects import get_subject_name, get_exam_name
from bot.utils.ml_model import get_faculty_recommendation

from bot.utils.database import get_user_by_telegram_id, add_application, create_or_update_user, async_session

router = Router()

class FacultySelection(StatesGroup):
    # –≠—Ç–∞–ø—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏)
    selecting_favorite_subjects = State()
    selecting_disliked_subjects = State()
    selecting_exams = State()
    
    # –≠—Ç–∞–ø—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
    waiting_for_interests = State()
    waiting_for_dislikes = State()
    
    # –≠—Ç–∞–ø—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()

# ========== –ù–ê–ß–ê–õ–û –ê–ù–ö–ï–¢–ò–†–û–í–ê–ù–ò–Ø ==========

@router.message(F.text == "üéì –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
async def start_faculty_selection(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.set_state(FacultySelection.selecting_favorite_subjects)
    await state.update_data(favorite_subjects=[])
    
    text = (
        "üéØ <b>–ü–æ–¥–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¢–£–°–£–†</b>\n\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!\n\n"
        "üìö <b>–®–∞–≥ 1/5:</b> –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω—Ä–∞–≤—è—Ç—Å—è</b> –≤ —à–∫–æ–ª–µ:\n\n"
        "üí° <i>–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç.</i>"
    )
    
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=[])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –õ–Æ–ë–ò–ú–´–• –ü–†–ï–î–ú–ï–¢–û–í ==========

@router.callback_query(F.data.startswith("subject_school_"), FacultySelection.selecting_favorite_subjects)
async def toggle_favorite_subject(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data
    subject_code = callback.data.replace("subject_school_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    data = await state.get_data()
    selected_subjects = data.get("favorite_subjects", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (toggle)
    if subject_code in selected_subjects:
        selected_subjects.remove(subject_code)
    else:
        selected_subjects.append(subject_code)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(favorite_subjects=selected_subjects)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=selected_subjects)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()

@router.callback_query(F.data == "subjects_school_done", FacultySelection.selecting_favorite_subjects)
async def confirm_favorite_subjects(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("favorite_subjects", [])
    
    if not selected_subjects:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    selected_names = [get_subject_name(code) for code in selected_subjects]
    text = (
        f"‚úÖ <b>–¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>\n\n"
        f"{'‚Ä¢ ' + chr(10) + '‚Ä¢ '.join(selected_names)}\n\n"
        f"–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    keyboard = get_confirm_subjects_keyboard("favorite", selected_subjects)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "confirm_favorite_subjects")
async def proceed_to_disliked_subjects(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.selecting_disliked_subjects)
    await state.update_data(disliked_subjects=[])
    
    text = (
        "üìö <b>–®–∞–≥ 2/5:</b> –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è</b> –≤ —à–∫–æ–ª–µ:\n\n"
        "üí° <i>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</i>"
    )
    
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=[])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "edit_favorite_subjects")
async def edit_favorite_subjects(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("favorite_subjects", [])
    
    text = (
        "üîÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>\n\n"
        "üìö –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω—Ä–∞–≤—è—Ç—Å—è</b> –≤ —à–∫–æ–ª–µ:"
    )
    
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=selected_subjects)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ù–ï–õ–Æ–ë–ò–ú–´–• –ü–†–ï–î–ú–ï–¢–û–í ==========

@router.callback_query(F.data.startswith("subject_school_"), FacultySelection.selecting_disliked_subjects)
async def toggle_disliked_subject(callback: CallbackQuery, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ª—é–±–∏–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_code = callback.data.replace("subject_school_", "")
    
    data = await state.get_data()
    selected_subjects = data.get("disliked_subjects", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    if subject_code in selected_subjects:
        selected_subjects.remove(subject_code)
    else:
        selected_subjects.append(subject_code)
    
    await state.update_data(disliked_subjects=selected_subjects)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=selected_subjects)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    except Exception:
        await callback.answer()

@router.callback_query(F.data == "subjects_school_done", FacultySelection.selecting_disliked_subjects)
async def confirm_disliked_subjects(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("disliked_subjects", [])
    
    if not selected_subjects:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    selected_names = [get_subject_name(code) for code in selected_subjects]
    text = (
        f"‚ùå <b>–ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è:</b>\n\n"
        f"{'‚Ä¢ ' + chr(10) + '‚Ä¢ '.join(selected_names)}\n\n"
        f"–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    keyboard = get_confirm_subjects_keyboard("disliked", selected_subjects)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "confirm_disliked_subjects")
async def proceed_to_exams(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.selecting_exams)
    await state.update_data(exams=[])
    
    text = (
        "üìù <b>–®–∞–≥ 3/5:</b> –í—ã–±–µ—Ä–∏ —ç–∫–∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã <b>–ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å</b> –∏–ª–∏ <b>—É–∂–µ —Å–¥–∞–ª</b>:\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏ –ï–ì–≠/–û–ì–≠ –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–ª–∏ –±—É–¥—É—Ç.</i>"
    )
    
    keyboard = get_subjects_keyboard(subject_type="exam", selected_subjects=[])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "edit_disliked_subjects")
async def edit_disliked_subjects(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("disliked_subjects", [])
    
    text = (
        "üîÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—é–±–∏–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>\n\n"
        "üìö –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è</b>:"
    )
    
    keyboard = get_subjects_keyboard(subject_type="school", selected_subjects=selected_subjects)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –≠–ö–ó–ê–ú–ï–ù–û–í ==========

@router.callback_query(F.data.startswith("subject_exam_"), FacultySelection.selecting_exams)
async def toggle_exam(callback: CallbackQuery, state: FSMContext):
    exam_code = callback.data.replace("subject_exam_", "")
    
    data = await state.get_data()
    selected_exams = data.get("exams", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞
    if exam_code in selected_exams:
        selected_exams.remove(exam_code)
    else:
        selected_exams.append(exam_code)
    
    await state.update_data(exams=selected_exams)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_subjects_keyboard(subject_type="exam", selected_subjects=selected_exams)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    except Exception:
        await callback.answer()

@router.callback_query(F.data == "subjects_exam_done", FacultySelection.selecting_exams)
async def confirm_exams(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_exams = data.get("exams", [])
    
    if not selected_exams:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–∫–∑–∞–º–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    selected_names = [get_exam_name(code) for code in selected_exams]
    text = (
        f"üìù <b>–¢–≤–æ–∏ —ç–∫–∑–∞–º–µ–Ω—ã:</b>\n\n"
        f"{'‚Ä¢ ' + chr(10) + '‚Ä¢ '.join(selected_names)}\n\n"
        f"–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    keyboard = get_confirm_subjects_keyboard("exams", selected_exams)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "confirm_exams_subjects")
async def proceed_to_interests(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.waiting_for_interests)
    
    text = (
        "üåü <b>–®–∞–≥ 4/5:</b> –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ <b>–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</b>?\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π, –¥–∏–∑–∞–π–Ω, —Ä–æ–±–æ—Ç—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è...</i>\n\n"
        "‚úçÔ∏è <b>–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:</b>"
    )
    
    await callback.message.edit_text(text, reply_markup=None, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "edit_exams_subjects")
async def edit_exams(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_exams = data.get("exams", [])
    
    text = (
        "üîÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤</b>\n\n"
        "üìù –í—ã–±–µ—Ä–∏ —ç–∫–∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å:"
    )
    
    keyboard = get_subjects_keyboard(subject_type="exam", selected_subjects=selected_exams)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# ========== –¢–ï–ö–°–¢–û–í–´–ï –ü–û–õ–Ø (–ò–ù–¢–ï–†–ï–°–´ –ò –ù–ï–ò–ù–¢–ï–†–ï–°–´) ==========

@router.message(FacultySelection.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await state.set_state(FacultySelection.waiting_for_dislikes)
    
    text = (
        "üö´ <b>–®–∞–≥ 5/5:</b> –ß—Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ <b>–ù–ï–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</b>?\n\n"
        "üí° <i>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–∫—É—á–Ω–∞—è —Ç–µ–æ—Ä–∏—è, –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏...</i>\n\n"
        "‚úçÔ∏è <b>–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:</b>"
    )
    
    await message.answer(text, parse_mode="HTML")

@router.message(FacultySelection.waiting_for_dislikes)
async def process_dislikes_and_get_recommendation(message: Message, state: FSMContext):
    await state.update_data(dislikes=message.text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–º–∞—à–∏–Ω–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç" –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_telegram_id(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å
    need_first_name = not (user and user.first_name)
    need_last_name = not (user and user.last_name)
    need_email = not (user and user.email)
    need_phone = not (user and user.phone)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML-–º–æ–¥–µ–ª–∏
    user_data = await state.get_data()
    ml_data = {
        "favorite_subjects": user_data.get("favorite_subjects", []),
        "disliked_subjects": user_data.get("disliked_subjects", []),
        "exams": user_data.get("exams", []),
        "interests": user_data.get("interests", ""),
        "dislikes": user_data.get("dislikes", "")
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç ML-–º–æ–¥–µ–ª–∏
    recommended_faculty = await get_faculty_recommendation(ml_data)
    await state.update_data(recommended_faculty=recommended_faculty)
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö
    if need_first_name:
        await state.set_state(FacultySelection.waiting_for_first_name)
        await message.answer(
            "üìã <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b> –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:",
            parse_mode="HTML"
        )
    elif need_last_name:
        await state.set_state(FacultySelection.waiting_for_last_name)
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:", parse_mode="HTML")
    elif need_email:
        await state.set_state(FacultySelection.waiting_for_email)
        await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b> –¥–ª—è —Å–≤—è–∑–∏:", parse_mode="HTML")
    elif need_phone:
        await state.set_state(FacultySelection.waiting_for_phone)
        await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML")
    else:
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await show_faculty_recommendation(message, state)

# ========== –°–ë–û–† –ö–û–ù–¢–ê–ö–¢–ù–´–• –î–ê–ù–ù–´–• ==========

@router.message(FacultySelection.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await state.set_state(FacultySelection.waiting_for_last_name)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await state.set_state(FacultySelection.waiting_for_email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b> –¥–ª—è —Å–≤—è–∑–∏:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(email=email)
    await state.set_state(FacultySelection.waiting_for_phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await save_user_data(message, state)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    await show_faculty_recommendation(message, state)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

async def save_user_data(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    user = await get_user_by_telegram_id(message.from_user.id)
    data = await state.get_data()
    
    async with async_session() as session:
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.first_name = data.get("first_name") or user.first_name
            user.last_name = data.get("last_name") or user.last_name
            user.email = data.get("email") or user.email
            user.phone = data.get("phone") or user.phone
            session.add(user)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await create_or_update_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=data.get("first_name", message.from_user.first_name),
                last_name=data.get("last_name", message.from_user.last_name)
            )
            user.email = data.get("email")
            user.phone = data.get("phone")
            session.add(user)
        
        await session.commit()

async def show_faculty_recommendation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    data = await state.get_data()
    recommended_faculty = data.get("recommended_faculty")
    
    confidence = recommended_faculty.get('confidence', 0.5)
    confidence_emoji = "üéØ" if confidence > 0.8 else "‚úÖ" if confidence > 0.6 else "ü§î"
    
    text = (
        f"üéì <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"{confidence_emoji} <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:</b>\n"
        f"<b>{recommended_faculty['name']}</b>\n\n"
        f"üí≠ <b>–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω:</b>\n"
        f"{recommended_faculty['reason']}\n\n"
        f"üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        f"{recommended_faculty['directions']}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?"
    )
    
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–Ø–í–û–ö ==========

@router.callback_query(F.data == "submit_application")
async def submit_application_callback(callback: CallbackQuery, state: FSMContext):
    try:
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            user = await create_or_update_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )

        data = await state.get_data()
        faculty_code = data.get("selected_faculty_code")
        if not faculty_code:
            await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return

        await add_application(user.id, faculty_code)
        await state.clear()
        
        faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç <b>{faculty_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n"
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.",
            reply_markup=None,
            parse_mode="HTML"
        )
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("faculty_"))
async def select_faculty_callback(callback: CallbackQuery, state: FSMContext):
    faculty_code = callback.data.split("_")[1]
    faculty_name = Config.FACULTIES.get(faculty_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
    
    text = (
        f"‚úÖ <b>–í—ã–±—Ä–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:</b> {faculty_name}\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ?"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–∞, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="choose_another")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await state.update_data(selected_faculty_code=faculty_code)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "choose_another")
async def choose_another_faculty(callback: CallbackQuery):
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
