from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.config import Config
from bot.keyboards.main_menu import get_faculty_choose_keyboard, get_main_menu
from bot.keyboards.subjects_keyboard import get_subjects_keyboard, get_confirm_subjects_keyboard
from bot.data.subjects import SCHOOL_SUBJECTS, EXAM_SUBJECTS
from bot.utils.ml_model import get_faculty_recommendation
from bot.utils.database import get_user_by_telegram_id, add_application, create_or_update_user
import re


def is_valid_phone(phone: str) -> bool:
    digits = re.sub(r'\D', '', phone)
    return len(digits) == 11

def is_valid_email(email: str) -> bool:
    pattern = r'^[a-zA-Z][a-zA-Z0-9._%+-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.fullmatch(pattern, email) is not None


router = Router()


class FacultySelection(StatesGroup):
    selecting_favorite_subjects = State()
    selecting_disliked_subjects = State()
    selecting_exams = State()
    entering_interests = State()
    entering_dislikes = State()
    choosing_faculty = State()
    entering_phone = State()
    entering_email = State()
    confirming_contacts = State()


@router.message(F.text == "üéì –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
async def start_faculty_selection(message: Message, state: FSMContext):
    await state.set_state(FacultySelection.selecting_favorite_subjects)
    await state.update_data(selected_favorite_subjects=[])

    text = (
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¢–£–°–£–†! üéØ\n\n"
        "<b>1/5: –õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</b>.\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
    )
    keyboard = get_subjects_keyboard('school', [])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("subject_"))
async def toggle_subject_selection(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    if len(data_parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    subject_type = data_parts[1]
    subject_code = "_".join(data_parts[2:])
    current_state = await state.get_state()
    state_data = await state.get_data()

    selected_key = None
    if subject_type == 'school':
        if current_state == FacultySelection.selecting_favorite_subjects.state:
            selected_key = 'selected_favorite_subjects'
        elif current_state == FacultySelection.selecting_disliked_subjects.state:
            selected_key = 'selected_disliked_subjects'
    elif subject_type == 'exam':
        if current_state == FacultySelection.selecting_exams.state:
            selected_key = 'selected_exams'

    if not selected_key:
        await callback.answer("–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
        return

    selected_subjects = state_data.get(selected_key, []).copy()
    if subject_code in selected_subjects:
        selected_subjects.remove(subject_code)
    else:
        selected_subjects.append(subject_code)

    await state.update_data({selected_key: selected_subjects})

    keyboard = get_subjects_keyboard(subject_type, selected_subjects)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except:
        await callback.message.delete()
        await callback.message.answer(callback.message.text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@router.callback_query(F.data == "subjects_school_done")
async def favorite_subjects_done(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    current_state = await state.get_state()

    if current_state == FacultySelection.selecting_favorite_subjects.state:
        selected_subjects = state_data.get('selected_favorite_subjects', [])
        if not selected_subjects:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
            return
        subjects_text = [f"‚Ä¢ {SCHOOL_SUBJECTS.get(code, code)}" for code in selected_subjects]
        confirmation_text = (
                "‚úÖ <b>–õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã:</b>\n\n" +
                "\n".join(subjects_text) +
                f"\n\n<b>–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ:</b> {len(selected_subjects)} –ø—Ä–µ–¥–º."
        )
        keyboard = get_confirm_subjects_keyboard('favorite')
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode="HTML")

    elif current_state == FacultySelection.selecting_disliked_subjects.state:
        selected_subjects = state_data.get('selected_disliked_subjects', [])
        if not selected_subjects:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
            return
        subjects_text = [f"‚Ä¢ {SCHOOL_SUBJECTS.get(code, code)}" for code in selected_subjects]
        confirmation_text = (
                "‚úÖ <b>–ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã:</b>\n\n" +
                "\n".join(subjects_text) +
                f"\n\n<b>–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ:</b> {len(selected_subjects)} –ø—Ä–µ–¥–º."
        )
        keyboard = get_confirm_subjects_keyboard('disliked')
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@router.callback_query(F.data == "subjects_exam_done")
async def exams_subjects_done(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    selected_subjects = state_data.get('selected_exams', [])
    if not selected_subjects:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–∫–∑–∞–º–µ–Ω!", show_alert=True)
        return
    subjects_text = [f"‚Ä¢ {EXAM_SUBJECTS.get(code, code)}" for code in selected_subjects]
    confirmation_text = (
            "‚úÖ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω—ã:</b>\n\n" +
            "\n".join(subjects_text) +
            f"\n\n<b>–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ:</b> {len(selected_subjects)} —ç–∫–∑–∞–º."
    )
    keyboard = get_confirm_subjects_keyboard('exams')
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "confirm_favorite_subjects")
async def confirm_favorite_subjects(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.selecting_disliked_subjects)
    await state.update_data(selected_disliked_subjects=[])
    text = (
        "–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
        "<b>2/5: –ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤—è—Ç—Å—è</b>.\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
    )
    keyboard = get_subjects_keyboard('school', [])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "confirm_disliked_subjects")
async def confirm_disliked_subjects(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.selecting_exams)
    await state.update_data(selected_exams=[])
    text = (
        "–ü–æ–Ω—è—Ç–Ω–æ! üìù\n\n"
        "<b>3/5: –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã</b>\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ï–ì–≠ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b> –≤ –≤—É–∑ –∏–ª–∏ –û–ì–≠ –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞.\n"
        "–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å –∏–ª–∏ —É–∂–µ —Å–¥–∞–ª?\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 —ç–∫–∑–∞–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
    )
    keyboard = get_subjects_keyboard('exam', [])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "confirm_exams_subjects")
async def confirm_exams_subjects(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.entering_interests)
    text = (
        "–•–æ—Ä–æ—à–æ! üìö\n\n"
        "<b>4/5: –ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?</b>\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, <b>—á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</b>?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π, –¥–∏–∑–∞–π–Ω, –Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...\n\n"
        "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await callback.message.edit_text(text, reply_markup=None, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("edit_"))
async def edit_subjects_selection(callback: CallbackQuery, state: FSMContext):
    edit_type = callback.data.split("_")[1]
    state_data = await state.get_data()

    if edit_type == 'favorite':
        await state.set_state(FacultySelection.selecting_favorite_subjects)
        selected = state_data.get('selected_favorite_subjects', [])
        subject_type = 'school'
        text = (
            "<b>1/5: –õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ</b>\n\n"
            "–ò–∑–º–µ–Ω–∏ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</b>.\n\n"
            "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
        )
    elif edit_type == 'disliked':
        await state.set_state(FacultySelection.selecting_disliked_subjects)
        selected = state_data.get('selected_disliked_subjects', [])
        subject_type = 'school'
        text = (
            "<b>2/5: –ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ</b>\n\n"
            "–ò–∑–º–µ–Ω–∏ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤—è—Ç—Å—è</b>.\n\n"
            "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
        )
    else:  # exams
        await state.set_state(FacultySelection.selecting_exams)
        selected = state_data.get('selected_exams', [])
        subject_type = 'exam'
        text = (
            "<b>3/5: –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã</b>\n\n"
            "<b>–í—ã–±–µ—Ä–∏ –ï–ì–≠ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</b> –∏–ª–∏ –û–ì–≠ –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞.\n\n"
            "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 —ç–∫–∑–∞–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
        )

    keyboard = get_subjects_keyboard(subject_type, selected)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.message(FacultySelection.entering_interests)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await state.set_state(FacultySelection.entering_dislikes)
    text = (
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚ú®\n\n"
        "<b>5/5: –ß—Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?</b>\n\n"
        "<b>–ß—Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</b>? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await message.answer(text, parse_mode="HTML")


@router.message(FacultySelection.entering_dislikes)
async def process_dislikes_and_recommend(message: Message, state: FSMContext):
    await state.update_data(dislikes=message.text)
    user_data = await state.get_data()
    ml_data = {
        'favorite_subjects': ", ".join([
            SCHOOL_SUBJECTS.get(code, code) for code in user_data.get('selected_favorite_subjects', [])
        ]),
        'disliked_subjects': ", ".join([
            SCHOOL_SUBJECTS.get(code, code) for code in user_data.get('selected_disliked_subjects', [])
        ]),
        'exams': ", ".join([
            EXAM_SUBJECTS.get(code, code) for code in user_data.get('selected_exams', [])
        ]),
        'interests': user_data.get('interests', ''),
        'dislikes': user_data.get('dislikes', ''),
        'selected_favorite_subjects': user_data.get('selected_favorite_subjects', []),
        'selected_disliked_subjects': user_data.get('selected_disliked_subjects', []),
        'selected_exams': user_data.get('selected_exams', [])
    }
    recommended_faculty = await get_faculty_recommendation(ml_data)
    await state.update_data(
        recommended_faculty_code=recommended_faculty.get('code'),
        recommended_faculty_text=recommended_faculty.get('name'),
        recommendation_reason=recommended_faculty.get('reason')
    )
    await state.set_state(FacultySelection.choosing_faculty)

    faculties_keyboard = get_faculty_choose_keyboard(
        recommended_faculty.get('code'), Config.FACULTIES
    )

    msg = (
        "üßë‚Äçüíª <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:</b>\n"
        f"<b>{recommended_faculty['code']} ‚Äî {recommended_faculty['name']}</b>\n"
        f"<i>{recommended_faculty['reason']}</i>\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –µ—Å–ª–∏ –ø–æ–∂–µ–ª–∞–µ—Ç–µ:"
    )

    await message.answer(msg, reply_markup=faculties_keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("faculty_"))
async def choose_faculty_handler(callback: CallbackQuery, state: FSMContext):
    faculty_code = callback.data.replace("faculty_", "", 1)
    faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
    await state.update_data(selected_faculty_code=faculty_code)

    user = await get_user_by_telegram_id(callback.from_user.id)
    if user and user.phone and user.email:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data="contacts_confirmed"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="change_contacts")
                ]
            ]
        )
        text = (
            f"<b>–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏:</b> {faculty_name}\n\n"
            f"<b>–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"E-mail: {user.email}\n\n"
            "–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ ‚Äî –∂–º–∏—Ç–µ <b>–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ</b>\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>"
        )
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.update_data(phone=user.phone, email=user.email)
        await callback.answer()
        return

    await state.set_state(FacultySelection.entering_phone)
    await callback.message.edit_text(
        f"<b>–í—ã–±—Ä–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:</b> {faculty_name}\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79130000000):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "change_contacts")
async def change_contacts_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.entering_phone)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79130000000):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "contacts_confirmed")
async def contacts_confirmed_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.confirming_contacts)
    data = await state.get_data()
    faculty_code = data.get("selected_faculty_code")
    phone = data.get("phone")
    email = data.get("email")
    faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="change_subjects")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="change_contacts_in_confirm")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty_name}</b>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
        f"E-mail: <b>{email}</b>\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É üëá"
    )
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "change_subjects")
async def change_subjects_from_confirm(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.selecting_favorite_subjects)
    data = await state.get_data()
    selected = data.get('selected_favorite_subjects', [])

    text = (
        "<b>1/5: –õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ</b>\n\n"
        "–ò–∑–º–µ–Ω–∏ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ <b>–Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</b>.\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω</b>"
    )
    keyboard = get_subjects_keyboard('school', selected)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "change_contacts_in_confirm")
async def change_contacts_in_confirm(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FacultySelection.entering_phone)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79130000000):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(FacultySelection.entering_phone)
async def ask_email(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä.\n"
            "–ü—Ä–∏–º–µ—Ä: <b>+79131234567</b> –∏–ª–∏ <b>89131234567</b>.",
            parse_mode="HTML"
        )
        return
    await state.update_data(phone=phone)
    await state.set_state(FacultySelection.entering_email)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à E-mail:")


@router.message(FacultySelection.entering_email)
async def finish_contacts_and_confirm(message: Message, state: FSMContext):
    email = message.text.strip()
    if not is_valid_email(email):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π E-mail!\n"
            "E-mail –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –±—É–∫–≤—ã, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã, –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª @, "
            "–ø–æ—Å–ª–µ @ ‚Äî —Ç–æ—á–∫–∞ –∏ –¥–æ–º–µ–Ω. –ü—Ä–∏–º–µ—Ä: <b>ivan123@example.com</b> –∏–ª–∏ <b>test2024@mail.ru</b>",
            parse_mode="HTML"
        )
        return
    await state.update_data(email=email)
    data = await state.get_data()
    faculty_code = data.get("selected_faculty_code")
    faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
    phone = data.get("phone")

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="change_subjects")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="change_contacts_in_confirm")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty_name}</b>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
        f"E-mail: <b>{email}</b>\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É üëá"
    )
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(FacultySelection.confirming_contacts)


@router.callback_query(F.data == "submit_application")
async def submit_application_callback(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        user = await get_user_by_telegram_id(callback.from_user.id)

        if not user:
            user = await create_or_update_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                phone=data.get("phone"),
                email=data.get("email")
            )
        else:
            await create_or_update_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                phone=data.get("phone"),
                email=data.get("email")
            )

        faculty_code = data.get("selected_faculty_code")
        if not faculty_code:
            await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return

        await add_application(user.id, faculty_code)
        await state.clear()

        faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç <b>{faculty_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n"
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.",
            reply_markup=None,
            parse_mode="HTML"
        )

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)

    except Exception as e:
        msg = str(e)
        if len(msg) > 150:
            msg = msg[:150] + "..."
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {msg}", show_alert=True)


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data == "edit_contacts")
async def edit_contacts_legacy(callback: CallbackQuery, state: FSMContext):
    await change_contacts_handler(callback, state)


@router.callback_query(F.data == "edit_subjects")
async def edit_subjects_legacy(callback: CallbackQuery, state: FSMContext):
    await change_subjects_from_confirm(callback, state)


@router.callback_query(F.data == "edit_subjects_flow")
async def edit_subjects_flow_legacy(callback: CallbackQuery, state: FSMContext):
    await change_subjects_from_confirm(callback, state)


@router.callback_query(F.data == "edit_contacts_flow")
async def edit_contacts_flow_legacy(callback: CallbackQuery, state: FSMContext):
    await change_contacts_in_confirm(callback, state)