from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.config import Config
from bot.keyboards.main_menu import get_faculty_inline_keyboard, get_main_menu
from bot.keyboards.subjects import get_subjects_keyboard, SUBJECTS_LIST
from bot.utils.ml_model import get_faculty_recommendation

from bot.utils.database import get_user_by_telegram_id, add_application, create_or_update_user, async_session

router = Router()

class FacultySelection(StatesGroup):
    waiting_for_favorite_subjects = State()
    waiting_for_disliked_subjects = State()
    waiting_for_exams = State()
    waiting_for_interests = State()
    waiting_for_dislikes = State()
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()

# –®–∞–≥ 1: –ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äï –ö–ù–û–ü–ö–ò
@router.message(F.text == "üéì –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
async def start_faculty_selection(message: Message, state: FSMContext):
    await state.set_state(FacultySelection.waiting_for_favorite_subjects)
    await state.update_data(favorite_subjects=[])
    text = (
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç! üéØ\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª."
    )
    await message.answer(text, reply_markup=get_subjects_keyboard())

@router.message(FacultySelection.waiting_for_favorite_subjects)
async def process_favorite_subjects(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    selected = data.get("favorite_subjects", [])
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not selected:
            await message.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=get_subjects_keyboard())
            return
        await state.set_state(FacultySelection.waiting_for_disliked_subjects)
        await state.update_data(disliked_subjects=[])
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_subjects_keyboard()
        )
    elif text in SUBJECTS_LIST:
        if text not in selected:
            selected.append(text)
        await state.update_data(favorite_subjects=selected)
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {text}\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë, –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_subjects_keyboard()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=get_subjects_keyboard())

# –®–∞–≥ 2: –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äï –ö–ù–û–ü–ö–ò
@router.message(FacultySelection.waiting_for_disliked_subjects)
async def process_disliked_subjects(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    selected = data.get("disliked_subjects", [])
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await state.set_state(FacultySelection.waiting_for_exams)
        await message.answer(
            "–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å –∏–ª–∏ —É–∂–µ —Å–¥–∞–ª?\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ä—É—Å—Å–∫–æ–º—É, —Ñ–∏–∑–∏–∫–µ –∏ —Ç.–¥.\n\n–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text in SUBJECTS_LIST:
        if text not in selected:
            selected.append(text)
        await state.update_data(disliked_subjects=selected)
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {text}\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë, –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_subjects_keyboard()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=get_subjects_keyboard())

# –î–∞–ª—å—à–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –∏ –±—ã–ª–æ
@router.message(FacultySelection.waiting_for_exams)
async def process_exams(message: Message, state: FSMContext):
    await state.update_data(exams=message.text)
    await state.set_state(FacultySelection.waiting_for_interests)
    text = (
        "–•–æ—Ä–æ—à–æ! üìö\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π, –¥–∏–∑–∞–π–Ω...\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await state.set_state(FacultySelection.waiting_for_dislikes)
    text = (
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚ú®\n\n"
        "–ß—Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_dislikes)
async def process_dislikes_and_contacts(message: Message, state: FSMContext):
    await state.update_data(dislikes=message.text)
    user = await get_user_by_telegram_id(message.from_user.id)

    need_first_name = not (user and user.first_name)
    need_last_name = not (user and user.last_name)
    need_email = not (user and user.email)
    need_phone = not (user and user.phone)

    user_data = await state.get_data()
    # –í–ù–ò–ú–ê–ù–ò–ï: favorite_subjects –∏ disliked_subjects —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–∫–∏!
    new_user_data = dict(user_data)
    new_user_data["favorite_subjects"] = ", ".join(user_data.get("favorite_subjects", []))
    new_user_data["disliked_subjects"] = ", ".join(user_data.get("disliked_subjects", []))

    recommended_faculty = await get_faculty_recommendation(new_user_data)
    await state.update_data(recommended_faculty=recommended_faculty)

    if need_first_name:
        await state.set_state(FacultySelection.waiting_for_first_name)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:", parse_mode="HTML")
    elif need_last_name:
        await state.set_state(FacultySelection.waiting_for_last_name)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:", parse_mode="HTML")
    elif need_email:
        await state.set_state(FacultySelection.waiting_for_email)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>e-mail</b> –¥–ª—è —Å–≤—è–∑–∏:", parse_mode="HTML")
    elif need_phone:
        await state.set_state(FacultySelection.waiting_for_phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML")
    else:
        await show_faculty_recommendation(message, state)

@router.message(FacultySelection.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await state.set_state(FacultySelection.waiting_for_last_name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await state.set_state(FacultySelection.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>e-mail</b> –¥–ª—è —Å–≤—è–∑–∏:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text.strip())
    await state.set_state(FacultySelection.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:", parse_mode="HTML")

@router.message(FacultySelection.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await get_user_by_telegram_id(message.from_user.id)
    data = await state.get_data()
    async with async_session() as session:
        if user:
            user.first_name = data.get("first_name") or user.first_name
            user.last_name = data.get("last_name") or user.last_name
            user.email = data.get("email")
            user.phone = data.get("phone")
            session.add(user)
        else:
            user = await create_or_update_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=data.get("first_name"),
                last_name=data.get("last_name")
            )
            user.email = data.get("email")
            user.phone = data.get("phone")
            session.add(user)
        await session.commit()
    await show_faculty_recommendation(message, state)

async def show_faculty_recommendation(message: Message, state: FSMContext):
    data = await state.get_data()
    recommended_faculty = data.get("recommended_faculty")
    text = (
        f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:\n"
        f"**{recommended_faculty['name']}**\n\n"
        f"–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω:\n{recommended_faculty['reason']}\n\n"
        f"–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n{recommended_faculty['directions']}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data == "submit_application")
async def submit_application_callback(callback: CallbackQuery, state: FSMContext):
    try:
        from bot.utils.database import get_user_by_telegram_id, create_or_update_user
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            user = await create_or_update_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )

        data = await state.get_data()
        faculty_code = data.get("selected_faculty_code")
        if not faculty_code:
            await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É:
        await add_application(user.id, faculty_code)

        await state.clear()
        faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç <b>{faculty_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n"
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.",
            reply_markup=None
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
        from bot.keyboards.main_menu import get_main_menu
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("faculty_"))
async def select_faculty_callback(callback: CallbackQuery, state: FSMContext):
    faculty_code = callback.data.split("_")[1]
    faculty_name = Config.FACULTIES.get(faculty_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
    text = (
        f"‚úÖ **–í—ã–±—Ä–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:** {faculty_name}\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ?"
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–∞, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="choose_another")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await state.update_data(selected_faculty_code=faculty_code)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "choose_another")
async def choose_another_faculty(callback: CallbackQuery):
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()