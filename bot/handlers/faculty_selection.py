from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.config import Config
from bot.keyboards.main_menu import get_faculty_inline_keyboard, get_main_menu
from bot.utils.ml_model import get_faculty_recommendation

from bot.utils.database import get_user_by_telegram_id, add_application

router = Router()

class FacultySelection(StatesGroup):
    waiting_for_favorite_subjects = State()
    waiting_for_disliked_subjects = State()
    waiting_for_exams = State()
    waiting_for_interests = State()
    waiting_for_dislikes = State()

@router.message(F.text == "üéì –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
async def start_faculty_selection(message: Message, state: FSMContext):
    await state.set_state(FacultySelection.waiting_for_favorite_subjects)
    text = (
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç! üéØ\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞...\n\n"
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start"
    )
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@router.message(FacultySelection.waiting_for_favorite_subjects)
async def process_favorite_subjects(message: Message, state: FSMContext):
    await state.update_data(favorite_subjects=message.text)
    await state.set_state(FacultySelection.waiting_for_disliked_subjects)
    text = (
        "–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤—è—Ç—Å—è:\n"
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_disliked_subjects)
async def process_disliked_subjects(message: Message, state: FSMContext):
    await state.update_data(disliked_subjects=message.text)
    await state.set_state(FacultySelection.waiting_for_exams)
    text = (
        "–ü–æ–Ω—è—Ç–Ω–æ! üìù\n\n"
        "–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å –∏–ª–∏ —É–∂–µ —Å–¥–∞–ª?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ñ–∏–∑–∏–∫–µ, —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É...\n\n"
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_exams)
async def process_exams(message: Message, state: FSMContext):
    await state.update_data(exams=message.text)
    await state.set_state(FacultySelection.waiting_for_interests)
    text = (
        "–•–æ—Ä–æ—à–æ! üìö\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π, –¥–∏–∑–∞–π–Ω...\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await state.set_state(FacultySelection.waiting_for_dislikes)
    text = (
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚ú®\n\n"
        "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - —á—Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:"
    )
    await message.answer(text)

@router.message(FacultySelection.waiting_for_dislikes)
async def process_dislikes_and_recommend(message: Message, state: FSMContext):
    await state.update_data(dislikes=message.text)
    user_data = await state.get_data()
    recommended_faculty = await get_faculty_recommendation(user_data)
    await state.clear()
    text = (
        f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:\n"
        f"**{recommended_faculty['name']}**\n\n"
        f"–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω:\n{recommended_faculty['reason']}\n\n"
        f"–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n{recommended_faculty['directions']}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "submit_application")
async def submit_application_callback(callback: CallbackQuery, state: FSMContext):
    try:
        from bot.utils.database import get_user_by_telegram_id, create_or_update_user
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            user = await create_or_update_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )

        data = await state.get_data()
        faculty_code = data.get("selected_faculty_code")
        if not faculty_code:
            await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É:
        await add_application(user.id, faculty_code)

        await state.clear()
        faculty_name = Config.FACULTIES.get(faculty_code, faculty_code)
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç <b>{faculty_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n"
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.",
            reply_markup=None
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
        from bot.keyboards.main_menu import get_main_menu
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("faculty_"))
async def select_faculty_callback(callback: CallbackQuery, state: FSMContext):
    faculty_code = callback.data.split("_")[1]
    faculty_name = Config.FACULTIES.get(faculty_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
    text = (
        f"‚úÖ **–í—ã–±—Ä–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:** {faculty_name}\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ?"
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–∞, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="choose_another")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await state.update_data(selected_faculty_code=faculty_code)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "choose_another")
async def choose_another_faculty(callback: CallbackQuery):
    keyboard = get_faculty_inline_keyboard(Config.FACULTIES)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()